# Python. Вступление.
# Общая характеристика:
#   поколение: 4
#   способ исполнения: интерпретатор (REPL)
#   парадигма: мульти-, основа - функциональная
#   типизация: динамическая, фиксированная при записи
x = 1j             # Pythin ориентирован на математику, в частности встроенна поддержка комплексных чисел. j - условная единица
print(x, type(x))

y = 1
print(y, type(y))
# Переменные оглашать не нужно, они создаются первым присваиванием и в дальнейшем не меняются (до следующего присваивания)

w = x + y
print (w, type(w)) # тест на "суровость" типизации ---- (1+1j) <class 'complex'>

# Разеление команд - ";" или разрыв строки (т.е. ";" не обязательно ставить, как в С++)

x = "2"         # новое присвоение меняет тип, теперь х - это str
# print (x+y)     # TypeError: can only concatenate str (not "int") to str
# print (y + x)     # TypeError: unsupported operand type(s) for +: 'int' and 'str'
                      # Операторы переозначены для разных типов, поэтому ошибки разные (один для инта, другой для стринг)
print (int (x) + y )  # 3
print (x + str(y)  )  # 21

print (2 ** 1024) # Python 3 поддерживает BigNumber, формального наибольшего числа не существует
#####

if y < 10:                # формирование блоков начинается с ":"    
    print ("y is")        # и задается отступами; к одному блоку принадлежат инструкции, которые
    print ("less than")   # имеют одинаковый отступ 
    print ("10")          # конец блока задается втяжкой (отступ назад, грубо говоря)
else :
 print ("y is not")      # Новый блок тоже задается отступами
 print ("less than")     # отступы в новом боке могут отличаться от отступов предыдущего блока, но должны быть одинаковы между собой в рамках своего блока
 
 print ("10")            # пропуск ряда на блок не влияет 

 #####
 
 x = input ( "Enter x = ")
 print (x, type(x))

 # строчные литералы 

 x = 'Hello'
 x = "World"
 x = '''
Hello, World'''

x = """
Hi, All!
"""

"""
Формально, это строка, но ничему не присвоена и поэтому это комментарий
"""